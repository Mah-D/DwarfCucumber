/* 
 * pragma-singleton-d
 *
 * Copyright (c) 2013 Pragma Dudes and project contributors.
 *
 * pragma-singleton-d's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of pragma-singleton-d that are not externally
 * maintained libraries.
 */

'use strict';

var singleton = require('../../PragmaSingleton.js');

function Constructor(value) {
	this.value = value;
}

Constructor.prototype.value = null;
Constructor.staticValue = 'hello world';

var SingleTonConstructor = singleton(Constructor);

exports['Singleton object check'] = function (test) {

	test.expect(2);

	var obj1 = new SingleTonConstructor('test');
	test.deepEqual(obj1.value, 'test');

	var obj2 = new SingleTonConstructor('test2');
	test.deepEqual(obj2.value, 'test');

	singleton.clear();

	test.done();
};

exports['Clear singleton cache'] = function (test) {

	test.expect(2);

	var obj1 = new SingleTonConstructor('test');
	test.deepEqual(obj1.value, 'test');

	singleton.clear();

	var obj2 = new SingleTonConstructor('test2');
	test.deepEqual(obj2.value, 'test2');

	singleton.clear();

	test.done();
};

exports['Static constructor property'] = function (test) {

	test.expect(2);
	test.deepEqual(SingleTonConstructor.staticValue, Constructor.staticValue);

	var obj1 = new SingleTonConstructor();
	test.deepEqual(obj1.constructor.staticValue, Constructor.staticValue);

	singleton.clear();

	test.done();
};