/* 
 * pragma-singleton-d
 *
 * Copyright (c) 2013 Pragma Dudes and project contributors.
 *
 * pragma-singleton-d's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, 
 * publish, distribute, sublicense, and/or sell copies of the Software, 
 * and to permit persons to whom the Software is furnished to do so, 
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 * This license applies to all parts of pragma-singleton-d that are not externally
 * maintained libraries.
 */

'use strict';

var singletonInstances = {};

/**
 * Creates singleton constructor wrapper by constructor name.
 * @param {Function} constructor Specified constructor.
 * @return {Function} Singleton constructor wrapper.
 */
module.exports = function (constructor) {

	var singletonKey = constructor.toString(),
		singletonWrapper = function () {

			if (singletonKey in singletonInstances) {
				return singletonInstances[singletonKey];
			}

			// create new object as we use "new" operator and set constructor to it.
			singletonInstances[singletonKey] =
				Object.create(constructor.prototype, {
					constructor: {
						value: constructor,
						enumerable: true,
						writable: true,
						configurable: true
					}
				});

			// apply constructor logic to new object.
			constructor.apply(singletonInstances[singletonKey], arguments);

			return singletonInstances[singletonKey];
		};

	// jshint proto: true, camelcase: false
	// NOTE: this string below isn't portable to some browsers like IE.
	// Using __proto__ is not a good idea, but solving current task it's an only way
	// for saving properties which were saved to constructor itself and V8 allows to do it.
	singletonWrapper.__proto__ = constructor;

	return singletonWrapper;
};

/**
 * Clears all singleton instances.
 */
module.exports.clear = function () {
	singletonInstances = {};
};